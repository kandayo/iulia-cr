# DO NOT EDIT THIS FILE.
# Generated from Iuliia schemas. See `Iuliia::SchemaImporter`.

require "../engine"

module Iuliia
  # The `BgnPcgnAlt` module provides transliteration (`Engine.translate`) using
  # the BGN/PCGN transliteration schema.
  #
  # [More information](https://dangry.ru/iuliia/bgn-pcgn/) (in Russian)
  #
  # ### Examples
  #
  # ```
  # Iuliia::BgnPcgnAlt.translate("Юлия, съешь ещё этих мягких французских булок из Йошкар-Олы, да выпей алтайского чаю")
  # # => "Yuliya, s”yesh’ yeshchё etikh myagkikh frantsuzskikh bulok iz Yoshkar-Oly, da vypey altayskogo chayu"
  #
  # Iuliia::BgnPcgnAlt.translate("Россия, город Йошкар-Ола, улица Яна Крастыня")
  # # => "Rossiya, gorod Yoshkar-Ola, ulitsa Yana Krastynya"
  #
  # Iuliia::BgnPcgnAlt.translate("Елизово")
  # # => "Yelizovo"
  #
  # Iuliia::BgnPcgnAlt.translate("Чапаевск")
  # # => "Chapayevsk"
  #
  # Iuliia::BgnPcgnAlt.translate("Мейеровка")
  # # => "Meyyerovka"
  #
  # Iuliia::BgnPcgnAlt.translate("Юрьев объезд")
  # # => "Yur’yev ob”yezd"
  #
  # Iuliia::BgnPcgnAlt.translate("Белкино")
  # # => "Belkino"
  #
  # Iuliia::BgnPcgnAlt.translate("Ёдва")
  # # => "Yёdva"
  #
  # Iuliia::BgnPcgnAlt.translate("Змииёвка")
  # # => "Zmiiyёvka"
  #
  # Iuliia::BgnPcgnAlt.translate("Айёган")
  # # => "Ayyёgan"
  #
  # Iuliia::BgnPcgnAlt.translate("Воробьёво")
  # # => "Vorob’yёvo"
  #
  # Iuliia::BgnPcgnAlt.translate("Кебанъёль")
  # # => "Keban”yёl’"
  #
  # Iuliia::BgnPcgnAlt.translate("Озёрный")
  # # => "Ozёrnyy"
  #
  # Iuliia::BgnPcgnAlt.translate("Тыайа")
  # # => "Tyaya"
  #
  # Iuliia::BgnPcgnAlt.translate("Сайылык")
  # # => "Sayylyk"
  #
  # Iuliia::BgnPcgnAlt.translate("Ойусардах")
  # # => "Oyusardakh"
  #
  # Iuliia::BgnPcgnAlt.translate("Йошкар-Ола")
  # # => "Yoshkar-Ola"
  #
  # Iuliia::BgnPcgnAlt.translate("Бийск")
  # # => "Biysk"
  #
  # Iuliia::BgnPcgnAlt.translate("Тыэкан")
  # # => "Tyekan"
  #
  # Iuliia::BgnPcgnAlt.translate("Суык-Су")
  # # => "Suyk-Su"
  #
  # Iuliia::BgnPcgnAlt.translate("Тында")
  # # => "Tynda"
  #
  # Iuliia::BgnPcgnAlt.translate("Улан-Удэ")
  # # => "Ulan-Ude"
  #
  # Iuliia::BgnPcgnAlt.translate("Электрогорск")
  # # => "Elektrogorsk"
  #
  # Iuliia::BgnPcgnAlt.translate("Руэм")
  # # => "Ruem"
  #
  # Iuliia::BgnPcgnAlt.translate("Вяртсиля")
  # # => "Vyartsilya"
  #
  # Iuliia::BgnPcgnAlt.translate("Ташчишма")
  # # => "Tashchishma"
  # ```
  module BgnPcgnAlt
    include Iuliia::Engine
    extend self

    private NAME        = "bgn_pcgn_alt"
    private DESCRIPTION = "BGN/PCGN transliteration schema"

    private STANDARD_RULES_MAPPING = {
      "а" => "a",
      "б" => "b",
      "в" => "v",
      "г" => "g",
      "д" => "d",
      "е" => "e",
      "ё" => "ё",
      "ж" => "zh",
      "з" => "z",
      "и" => "i",
      "й" => "y",
      "к" => "k",
      "л" => "l",
      "м" => "m",
      "н" => "n",
      "о" => "o",
      "п" => "p",
      "р" => "r",
      "с" => "s",
      "т" => "t",
      "у" => "u",
      "ф" => "f",
      "х" => "kh",
      "ц" => "ts",
      "ч" => "ch",
      "ш" => "sh",
      "щ" => "shch",
      "ъ" => "”",
      "ы" => "y",
      "ь" => "’",
      "э" => "e",
      "ю" => "yu",
      "я" => "ya",
      "А" => "A",
      "Б" => "B",
      "В" => "V",
      "Г" => "G",
      "Д" => "D",
      "Е" => "E",
      "Ё" => "Ё",
      "Ж" => "Zh",
      "З" => "Z",
      "И" => "I",
      "Й" => "Y",
      "К" => "K",
      "Л" => "L",
      "М" => "M",
      "Н" => "N",
      "О" => "O",
      "П" => "P",
      "Р" => "R",
      "С" => "S",
      "Т" => "T",
      "У" => "U",
      "Ф" => "F",
      "Х" => "Kh",
      "Ц" => "Ts",
      "Ч" => "Ch",
      "Ш" => "Sh",
      "Щ" => "Shch",
      "Ъ" => "”",
      "Ы" => "Y",
      "Ь" => "’",
      "Э" => "E",
      "Ю" => "Yu",
      "Я" => "Ya",
    }
    private PREVIOUS_CHARACTERS_RULES_MAPPING = {
      "е"  => "ye",
      "ае" => "ye",
      "ее" => "ye",
      "ёе" => "ye",
      "ие" => "ye",
      "йе" => "ye",
      "ое" => "ye",
      "уе" => "ye",
      "ъе" => "ye",
      "ые" => "ye",
      "ье" => "ye",
      "эе" => "ye",
      "юе" => "ye",
      "яе" => "ye",
      "ё"  => "yё",
      "аё" => "yё",
      "её" => "yё",
      "ёё" => "yё",
      "иё" => "yё",
      "йё" => "yё",
      "оё" => "yё",
      "уё" => "yё",
      "ъё" => "yё",
      "ыё" => "yё",
      "ьё" => "yё",
      "эё" => "yё",
      "юё" => "yё",
      "яё" => "yё",
      "Е"  => "Ye",
      "Ае" => "ye",
      "Ее" => "ye",
      "Ёе" => "ye",
      "Ие" => "ye",
      "Йе" => "ye",
      "Ое" => "ye",
      "Уе" => "ye",
      "Ъе" => "ye",
      "Ые" => "ye",
      "Ье" => "ye",
      "Эе" => "ye",
      "Юе" => "ye",
      "Яе" => "ye",
      "Ё"  => "Yё",
      "Аё" => "yё",
      "Её" => "yё",
      "Ёё" => "yё",
      "Иё" => "yё",
      "Йё" => "yё",
      "Оё" => "yё",
      "Уё" => "yё",
      "Ъё" => "yё",
      "Ыё" => "yё",
      "Ьё" => "yё",
      "Эё" => "yё",
      "Юё" => "yё",
      "Яё" => "yё",
      "АЕ" => "Ye",
      "ЕЕ" => "Ye",
      "ЁЕ" => "Ye",
      "ИЕ" => "Ye",
      "ЙЕ" => "Ye",
      "ОЕ" => "Ye",
      "УЕ" => "Ye",
      "ЪЕ" => "Ye",
      "ЫЕ" => "Ye",
      "ЬЕ" => "Ye",
      "ЭЕ" => "Ye",
      "ЮЕ" => "Ye",
      "ЯЕ" => "Ye",
      "АЁ" => "Yё",
      "ЕЁ" => "Yё",
      "ЁЁ" => "Yё",
      "ИЁ" => "Yё",
      "ЙЁ" => "Yё",
      "ОЁ" => "Yё",
      "УЁ" => "Yё",
      "ЪЁ" => "Yё",
      "ЫЁ" => "Yё",
      "ЬЁ" => "Yё",
      "ЭЁ" => "Yё",
      "ЮЁ" => "Yё",
      "ЯЁ" => "Yё",
    }
    private NEXT_CHARACTERS_RULES_MAPPING      = {} of String => String
    private SPECIAL_WORD_ENDINGS_RULES_MAPPING = {} of String => String

    # Returns the transliteration schema **name**.
    def name : String
      NAME
    end

    # Returns the transliteration schema **description**.
    def description : String
      DESCRIPTION
    end

    private def standard_rules_mapping : Hash(String, String)
      STANDARD_RULES_MAPPING
    end

    private def previous_characters_rules_mapping : Hash(String, String)
      PREVIOUS_CHARACTERS_RULES_MAPPING
    end

    private def next_characters_rules_mapping : Hash(String, String)
      NEXT_CHARACTERS_RULES_MAPPING
    end

    private def special_word_endings_rules_mapping : Hash(String, String)
      SPECIAL_WORD_ENDINGS_RULES_MAPPING
    end
  end
end
