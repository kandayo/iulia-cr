# DO NOT EDIT THIS FILE.
# Generated from Iuliia schemas. See `Iuliia::SchemaImporter`.

require "../engine"

module Iuliia
  # The `Gost7034` module provides transliteration (`Engine.translate`) using
  # the GOST R 7.0.34-2014 transliteration schema.
  #
  # [More information](https://dangry.ru/iuliia/gost-7034/) (in Russian)
  #
  # ### Comments
  #
  # This schema defines alternatives for many letters, but does not specify when to use which:
  #
  #  - е → e  (ye)
  #  - ё → yo (jo)
  #  - й → j  (i,y)
  #  - х → x  (kh)
  #  - ц → c  (tz,cz)
  #  - ъ → '' (empty)
  #  - ь → '  (empty)
  #  - ю → yu (ju)
  #   я → ya (ja)
  #
  # Iuliia uses the first of suggested translations for each such letter.
  #
  # ### Examples
  #
  # ```
  # Iuliia::Gost7034.translate("Юлия, съешь ещё этих мягких французских булок из Йошкар-Олы, да выпей алтайского чаю")
  # # => "Yuliya, s''esh' eshhyo etix myagkix francuzskix bulok iz Joshkar-Oly, da vypej altajskogo chayu"
  # ```
  module Gost7034
    include Iuliia::Engine
    extend self

    private NAME        = "gost_7034"
    private DESCRIPTION = "GOST R 7.0.34-2014 transliteration schema"

    private STANDARD_RULES_MAPPING = {
      "а" => "a",
      "б" => "b",
      "в" => "v",
      "г" => "g",
      "д" => "d",
      "е" => "e",
      "ё" => "yo",
      "ж" => "zh",
      "з" => "z",
      "и" => "i",
      "й" => "j",
      "к" => "k",
      "л" => "l",
      "м" => "m",
      "н" => "n",
      "о" => "o",
      "п" => "p",
      "р" => "r",
      "с" => "s",
      "т" => "t",
      "у" => "u",
      "ф" => "f",
      "х" => "x",
      "ц" => "c",
      "ч" => "ch",
      "ш" => "sh",
      "щ" => "shh",
      "ъ" => "''",
      "ы" => "y",
      "ь" => "'",
      "э" => "e",
      "ю" => "yu",
      "я" => "ya",
      "А" => "A",
      "Б" => "B",
      "В" => "V",
      "Г" => "G",
      "Д" => "D",
      "Е" => "E",
      "Ё" => "Yo",
      "Ж" => "Zh",
      "З" => "Z",
      "И" => "I",
      "Й" => "J",
      "К" => "K",
      "Л" => "L",
      "М" => "M",
      "Н" => "N",
      "О" => "O",
      "П" => "P",
      "Р" => "R",
      "С" => "S",
      "Т" => "T",
      "У" => "U",
      "Ф" => "F",
      "Х" => "X",
      "Ц" => "C",
      "Ч" => "Ch",
      "Ш" => "Sh",
      "Щ" => "Shh",
      "Ъ" => "''",
      "Ы" => "Y",
      "Ь" => "'",
      "Э" => "E",
      "Ю" => "Yu",
      "Я" => "Ya",
    }
    private PREVIOUS_CHARACTERS_RULES_MAPPING  = {} of String => String
    private NEXT_CHARACTERS_RULES_MAPPING      = {} of String => String
    private SPECIAL_WORD_ENDINGS_RULES_MAPPING = {} of String => String

    # Returns the transliteration schema **name**.
    def name : String
      NAME
    end

    # Returns the transliteration schema **description**.
    def description : String
      DESCRIPTION
    end

    private def standard_rules_mapping : Hash(String, String)
      STANDARD_RULES_MAPPING
    end

    private def previous_characters_rules_mapping : Hash(String, String)
      PREVIOUS_CHARACTERS_RULES_MAPPING
    end

    private def next_characters_rules_mapping : Hash(String, String)
      NEXT_CHARACTERS_RULES_MAPPING
    end

    private def special_word_endings_rules_mapping : Hash(String, String)
      SPECIAL_WORD_ENDINGS_RULES_MAPPING
    end
  end
end
