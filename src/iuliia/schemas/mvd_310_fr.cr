# DO NOT EDIT THIS FILE.
# Generated from Iuliia schemas. See `Iuliia::SchemaImporter`.

require "../engine"

module Iuliia
  # The `Mvd310Fr` module provides transliteration (`.translate`) using
  # the MVD 310-1997 transliteration schema.
  #
  # ### Examples
  #
  # ```
  # Iuliia::Mvd310Fr.translate("Юлия, съешь ещё этих мягких французских булок из Йошкар-Олы, да выпей алтайского чаю")
  # # => "Iouliia, sech echtche etikh miagkikh frantsouzskikh boulok iz Iochkar-Oly, da vypei altaiskogo tchaiou"
  #
  # Iuliia::Mvd310Fr.translate("Юлия Щеглова")
  # # => "Iouliia Chtcheglova"
  #
  # Iuliia::Mvd310Fr.translate("Гайа Васильева")
  # # => "Gaia Vasilieva"
  #
  # Iuliia::Mvd310Fr.translate("Андрей Видный")
  # # => "Andrei Vidnyi"
  #
  # Iuliia::Mvd310Fr.translate("Оксана Снегирёва")
  # # => "Oxana Sneguireva"
  #
  # Iuliia::Mvd310Fr.translate("Юрий Васин")
  # # => "Iourii Vasine"
  # ```
  module Mvd310Fr
    include Iuliia::Engine
    extend self

    private NAME        = "mvd_310_fr"
    private DESCRIPTION = "MVD 310-1997 transliteration schema"

    private STANDARD_RULES_MAPPING = {
      "а" => "a",
      "б" => "b",
      "в" => "v",
      "г" => "g",
      "д" => "d",
      "е" => "e",
      "ё" => "e",
      "ж" => "j",
      "з" => "z",
      "и" => "i",
      "й" => "i",
      "к" => "k",
      "л" => "l",
      "м" => "m",
      "н" => "n",
      "о" => "o",
      "п" => "p",
      "р" => "r",
      "с" => "s",
      "т" => "t",
      "у" => "ou",
      "ф" => "f",
      "х" => "kh",
      "ц" => "ts",
      "ч" => "tch",
      "ш" => "ch",
      "щ" => "chtch",
      "ъ" => "",
      "ы" => "y",
      "ь" => "",
      "э" => "e",
      "ю" => "iou",
      "я" => "ia",
      "А" => "A",
      "Б" => "B",
      "В" => "V",
      "Г" => "G",
      "Д" => "D",
      "Е" => "E",
      "Ё" => "E",
      "Ж" => "J",
      "З" => "Z",
      "И" => "I",
      "Й" => "I",
      "К" => "K",
      "Л" => "L",
      "М" => "M",
      "Н" => "N",
      "О" => "O",
      "П" => "P",
      "Р" => "R",
      "С" => "S",
      "Т" => "T",
      "У" => "Ou",
      "Ф" => "F",
      "Х" => "Kh",
      "Ц" => "Ts",
      "Ч" => "Tch",
      "Ш" => "Ch",
      "Щ" => "Chtch",
      "Ъ" => "",
      "Ы" => "Y",
      "Ь" => "",
      "Э" => "E",
      "Ю" => "Iou",
      "Я" => "Ia",
    }
    private PREVIOUS_CHARACTERS_RULES_MAPPING = {
      "ге" => "ue",
      "ги" => "ui",
      "гы" => "uy",
      "ье" => "ie",
      "кс" => "x",
      "Ге" => "ue",
      "Ги" => "ui",
      "Гы" => "uy",
      "Ье" => "ie",
      "Кс" => "x",
      "ГЕ" => "Ue",
      "ГИ" => "Ui",
      "ГЫ" => "Uy",
      "ЬЕ" => "Ie",
      "КС" => "X",
    }
    private NEXT_CHARACTERS_RULES_MAPPING = {
      "кс" => "",
      "КС" => "",
      "Кс" => "",
    }
    private SPECIAL_WORD_ENDINGS_RULES_MAPPING = {
      "ин" => "ine",
      "Ин" => "Ine",
      "ИН" => "INE",
    }

    # Returns the transliteration schema **name**.
    def name : String
      NAME
    end

    # Returns the transliteration schema **description**.
    def description : String
      DESCRIPTION
    end

    private def standard_rules_mapping : Hash(String, String)
      STANDARD_RULES_MAPPING
    end

    private def previous_characters_rules_mapping : Hash(String, String)
      PREVIOUS_CHARACTERS_RULES_MAPPING
    end

    private def next_characters_rules_mapping : Hash(String, String)
      NEXT_CHARACTERS_RULES_MAPPING
    end

    private def special_word_endings_rules_mapping : Hash(String, String)
      SPECIAL_WORD_ENDINGS_RULES_MAPPING
    end
  end
end
